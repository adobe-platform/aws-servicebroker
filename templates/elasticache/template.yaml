AWSTemplateFormatVersion: 2010-09-09
Description: AWS Service Broker - Amazon ElastiCache for memcached (qs-1nt0fs92c)
Metadata:
  AWS::ServiceBroker::Specification:
    Version: 1.0
    Tags:
    - AWS
    - RDS
    - elasticache
    - memcache
    Name: elasticache
    DisplayName: Amazon ElastiCache
    LongDescription: Amazon ElastiCache is a web service that makes it easy to set
      up, manage, and scale distributed in-memory cache environments in the cloud.
      It provides a high performance, resizeable, and cost-effective in-memory cache,
      while removing the complexity associated with deploying and managing a distributed
      cache environment.
    ImageUrl: https://s3.amazonaws.com/awsservicebroker/icons/Database_AmazonElasticCache_LARGE.png
    DocumentationUrl: https://aws.amazon.com/documentation/elasticache/
    ProviderDisplayName: Amazon Web Services
    ServicePlans:
      sign-production:
        DisplayName: Production
        Description: Configuration designed for production deployments
        LongDescription: Creates an Amazon ElastiCache for memcached, optimized for
          production use
        Cost: https://aws.amazon.com/elasticache/pricing/
        ParameterValues:
          ClusterType: multi-node
          AllowVersionUpgrade: 'False'
          PortNumber: '11211'
          AZMode: cross-az
          InboundSGName: '*-sgs-eks-workers-*'
          SubnetName: '*-support-*'
          VpcName: "*micro*"
      custom:
        DisplayName: Custom
        Description: Custom Configuration for Advanced deployments
        LongDescription: Creates an Amazon ElastiCache for memcached with custom configuration
        Cost: https://aws.amazon.com/elasticache/pricing/
        ParameterValues: {}
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Elasticache Settings
      Parameters:
      - ClusterType
      - NumCacheNodes
      - EngineVersion
      - CacheNodeType
      - AllowVersionUpgrade
    - Label:
        default: Network and Security
      Parameters:
      - VpcName
      - PortNumber
      - AZMode
      - InboundSGName
      - SubnetName
    - Label:
        default: Maintenance
      Parameters:
      - PreferredMaintenanceWindowStartTime
      - PreferredMaintenanceWindowEndTime
    ParameterLabels:
      ClusterType:
        default: Cluster Type
      NumCacheNodes:
        default: Number of Cache Nodes
      EngineVersion:
        default: Engine Version
      CacheNodeType:
        default: Cache Node Type
      AllowVersionUpgrade:
        default: Allow Version Upgrade
      VpcName:
        default: Vpc Name
      PortNumber:
        default: Port Number
      AZMode:
        default: AZ Mode
      InboundSGName:
        default: Accessing Security Group
      PreferredMaintenanceWindowStartTime:
        default: Preferred MaintenanceWindow Start Time
      PreferredMaintenanceWindowEndTime:
        default: Preferred Maintenance Window End Time
Parameters:
  VpcName:
    Description: The name of the VPC to launch the Memcache cluster into
    Type: String
  PreferredMaintenanceWindowDay:
    Description: The day of the week which ElastiCache maintenance will be performed
    Type: String
    Default: Mon
    AllowedValues:
    - Mon
    - Tue
    - Wed
    - Thu
    - Fri
    - Sat
    - Sun
  PreferredMaintenanceWindowStartTime:
    Description: The weekly start time in UTC for the ElastiCache maintenance window,
      must be less than PreferredMaintenanceWindowEndTime and cannot overlap with
      PreferredBackupWindow
    Type: String
    Default: 04:00
    AllowedValues:
    - 00:00
    - 01:00
    - 02:00
    - 03:00
    - 04:00
    - 05:00
    - 06:00
    - 07:00
    - 08:00
    - 09:00
    - '10:00'
    - '11:00'
    - '12:00'
    - '13:00'
    - '14:00'
    - '15:00'
    - '16:00'
    - '17:00'
    - '18:00'
    - '19:00'
    - '20:00'
    - '21:00'
    - '22:00'
  PreferredMaintenanceWindowEndTime:
    Description: The weekly end time in UTC for the ElastiCache maintenance window,
      must be more than PreferredMaintenanceWindowEndTime and cannot overlap with
      PreferredBackupWindow
    Type: String
    Default: 06:00
    AllowedValues:
    - 00:00
    - 01:00
    - 02:00
    - 03:00
    - 04:00
    - 05:00
    - 06:00
    - 07:00
    - 08:00
    - 09:00
    - '10:00'
    - '11:00'
    - '12:00'
    - '13:00'
    - '14:00'
    - '15:00'
    - '16:00'
    - '17:00'
    - '18:00'
    - '19:00'
    - '20:00'
    - '21:00'
    - '22:00'
  SubnetName:
    Description: String to match against existing subnets to place the cache
      cluster in (glob wildcards allowed).
    Type: String
  InboundSGName:
    Description: Existing Security Group name to allow access to database (glob
      wildcards allowed).
    Type: String
  CacheNodeType:
    Description: The compute and memory capacity of nodes in a cache cluster.
    Type: String
    AllowedValues:
    - cache.t2.small
    - cache.t2.medium
    - cache.m3.medium
    - cache.m3.large
    - cache.m3.xlarge
    - cache.m3.2xlarge
    - cache.m4.medium
    - cache.m4.large
    - cache.m4.xlarge
    - cache.m4.2xlarge
    - cache.m4.4xlarge
    - cache.m4.10xlarge
    - cache.r4.large
    - cache.r4.xlarge
    - cache.r4.2xlarge
    - cache.r4.4xlarge
    - cache.r4.8xlarge
    Default: cache.m4.large
  EngineVersion:
    Description: Family to be used with cluster or parameter group
    Type: String
    AllowedValues:
    - 1.4.34
    - 1.4.33
    - 1.4.24
    - 1.4.5
    Default: 1.4.34
  NumCacheNodes:
    Description: The number of cache nodes in the cluster.
    Type: String
    Default: '3'
  ClusterType:
    Description: The type of cluster. Specify single-node or multi-node (default).  Number
      of nodes must be greater than 1 for multi-node
    Type: String
    AllowedValues:
    - single-node
    - multi-node
    Default: multi-node
  AllowVersionUpgrade:
    Description: Indicates that minor engine upgrades will be applied automatically
      to the cache cluster during the maintenance window. The default value is true.
    Type: String
    Default: 'True'
    AllowedValues:
    - 'True'
    - 'False'
  PortNumber:
    Description: The port number for the Cluster to listen on
    Type: Number
    Default: 5439
    MinValue: 1150
    MaxValue: 65535
  AZMode:
    Description: Specifies whether the nodes in this Memcached cluster are created
      in a single Availability Zone or created across multiple Availability Zones
      in the cluster's region. This parameter is only supported for Memcached cache
      clusters. If the AZMode and PreferredAvailabilityZones are not specified, ElastiCache
      assumes single-az mode.
    Type: String
    Default: cross-az
    AllowedValues:
    - single-az
    - cross-az
Conditions:
  Cross-AZ:
    !Equals
    - !Ref AZMode
    - cross-az
Resources:
  ElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AutoMinorVersionUpgrade: !Ref AllowVersionUpgrade
      AZMode: !Ref AZMode
      CacheNodeType: !Ref CacheNodeType
      CacheParameterGroupName: !Ref ElasticacheParameterGroup
      CacheSubnetGroupName: !Ref ClusterSubnetGroup
      Engine: memcached
      EngineVersion: !Ref EngineVersion
      NumCacheNodes: !Ref NumCacheNodes
      Port: !Ref PortNumber
      PreferredMaintenanceWindow: !Sub ${PreferredMaintenanceWindowDay}:${PreferredMaintenanceWindowStartTime}-${PreferredMaintenanceWindowDay}:${PreferredMaintenanceWindowEndTime}
      VpcSecurityGroupIds:
      - !Ref ClusterSecurityGroup
  ElasticacheParameterGroup:
    Type: AWS::ElastiCache::ParameterGroup
    Properties:
      CacheParameterGroupFamily: memcached1.4
      Description: AWS Service Broker Elasticache cluster
      Properties: {}
  ClusterSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: AWS Service Broker Elasticache cluster
      SubnetIds: !GetAtt AWSSBInjectedGetSubnetIds.SubnetIDs
  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Allow Client connections
      VpcId: !GetAtt AWSSBInjectedGetSubnetIds.VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Ref PortNumber
        ToPort: !Ref PortNumber
        SourceSecurityGroupId: !GetAtt AWSSBInjectedGetSG.SecurityGroupId
      SecurityGroupEgress:
      - IpProtocol: '-1'
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
  AWSSBInjectedLambdaZipsBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []
  AWSSBInjectedCopyZips:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedCopyZipsLambda.Arn
      DestBucket: !Ref AWSSBInjectedLambdaZipsBucket
      SourceBucket: micro-aws-servicebroker-templates
      Prefix: ""
      Objects:
      - functions/get_subnet_ids/lambda_function.zip
      - functions/get_sg/lambda_function.zip
      - layers/requests/lambda_layer.zip
  AWSSBInjectedCopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
      - PolicyName: lambda-copier
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
            - arn:aws:s3:::micro-aws-servicebroker-templates/*
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:DeleteObject
            Resource:
            - !Sub arn:aws:s3:::${AWSSBInjectedLambdaZipsBucket}/*
  AWSSBInjectedCopyZipsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt AWSSBInjectedCopyZipsRole.Arn
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse


          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s' % dest_bucket)
                  print('key = %s' % key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)


          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)


          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)


          def handler(event, context):
              timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
  AWSSBInjectedGetSubnetIdsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_subnet_ids
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeVpcs
            - ec2:DescribeSubnets
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGetSubnetIdsLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGetSubnetIdsRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/get_subnet_ids/lambda_function.zip
      Runtime: python3.7
      Timeout: '60'
      Layers:
        - !Ref AWSSBRequestsLambdaLayer
  AWSSBInjectedGetSubnetIds:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGetSubnetIdsLambda.Arn
      VpcName: !Ref VpcName
      SubnetName: !Ref SubnetName
  AWSSBInjectedGetSGRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_sg
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeSecurityGroups
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGetSGLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGetSGRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/get_sg/lambda_function.zip
      Runtime: python3.7
      Timeout: '60'
      Layers:
        - !Ref AWSSBRequestsLambdaLayer
  AWSSBInjectedGetSG:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGetSGLambda.Arn
      SGName: !Ref InboundSGName
  AWSSBRequestsLambdaLayer:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: layers/requests/lambda_layer.zip
      Description: Contains requests and cfnresponse.send()
      LayerName: requests
      LicenseInfo: Apache License v2.0, AWS Customer Agreement
Outputs:
  EndpointAddress:
    Value:
      !GetAtt
      - ElastiCacheCluster
      - ConfigurationEndpoint.Address
