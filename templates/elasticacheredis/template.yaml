AWSTemplateFormatVersion: 2010-09-09
Description: AWS Service Broker - Amazon ElastiCache for redis (qs-1nt0fs92c)
Metadata:
  AWS::ServiceBroker::Specification:
    Version: 1.1
    Tags:
    - AWS
    - RDS
    - elasticache
    - redis
    Name: elasticacheredis
    DisplayName: Amazon ElastiCache
    LongDescription: Amazon ElastiCache is a web service that makes it easy to set
      up, manage, and scale distributed in-memory cache environments in the cloud.
      It provides a high performance, resizeable, and cost-effective in-memory cache,
      while removing the complexity associated with deploying and managing a distributed
      cache environment.
    ImageUrl: https://s3.amazonaws.com/awsservicebroker/icons/Database_AmazonElasticCache_LARGE.png
    DocumentationUrl: https://aws.amazon.com/documentation/elasticache/
    ProviderDisplayName: Amazon Web Services
    UpdatableParameters:
      - ArchPathTag
      - EnvironmentTag
      - OwnerTag
      - CostCenterTag
      - DataClassificationTag
      - PCIDataTag
    ServicePlans:
      production:
        DisplayName: Production
        Description: Configuration designed for production deployments
        LongDescription: Creates an Amazon ElastiCache for redis, optimized for
          production use
        Cost: https://aws.amazon.com/elasticache/pricing/
        ParameterValues:
          AllowVersionUpgrade: 'False'
          AutomaticFailover: 'True'
          NumCacheClusters: 3
          InboundSGName: '*-sgs-private'
          SubnetName: '*-support-*'
          VpcName: "*micro*"
      dev:
        DisplayName: Development
        Description: Configuration designed for development deployments
        LongDescription: Creates an Amazon ElastiCache for redis, optimized for
          development use
        Cost: https://aws.amazon.com/elasticache/pricing/
        ParameterValues:
          AllowVersionUpgrade: 'True'
          AutomaticFailover: 'False'
          NumCacheClusters: 1
          InboundSGName: '*-sgs-private'
          SubnetName: '*-support-*'
          VpcName: "*micro*"
          PreferredMaintenanceWindowDay: Sat
          PreferredMaintenanceWindowStartTime: 06:00
          PreferredMaintenanceWindowEndTime: 10:00
      custom:
        DisplayName: Custom
        Description: Custom Configuration for Advanced deployments
        LongDescription: Creates an Amazon ElastiCache for memcached with custom configuration
        Cost: https://aws.amazon.com/elasticache/pricing/
        ParameterValues: {}
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Elasticache Settings
      Parameters:
      - Name
      - NumCacheClusters
      - EngineVersion
      - CacheNodeType
      - AllowVersionUpgrade
      - AutomaticFailover
    - Label:
        default: Network and Security
      Parameters:
      - VpcName
      - PortNumber
      - InboundSGName
      - SubnetName
    - Label:
        default: Maintenance
      Parameters:
      - PreferredMaintenanceWindowStartTime
      - PreferredMaintenanceWindowEndTime
    - Label:
        default: Adobe Tags
      Parameters:
        - ArchPathTag
        - EnvironmentTag
        - OwnerTag
        - CostCenterTag
        - DataClassificationTag
        - PCIDataTag
    ParameterLabels:
      Name:
        default: Name of service for ReplicationGroupDescription
      NumCacheClusters:
        default: Number of Cache Nodes
      EngineVersion:
        default: Engine Version
      CacheNodeType:
        default: Cache Node Type
      AllowVersionUpgrade:
        default: Allow Version Upgrade
      AutomaticFailover:
        default: Automatic Failover
      VpcName:
        default: Vpc Name
      PortNumber:
        default: Port Number
      InboundSGName:
        default: Accessing Security Group
      SubnetName:
        default: Subnet Name
      PreferredMaintenanceWindowStartTime:
        default: Preferred MaintenanceWindow Start Time
      PreferredMaintenanceWindowEndTime:
        default: Preferred Maintenance Window End Time
      ArchPathTag:
        default: Cloud Resource Tagging Standard ArchPath
      EnvironmentTag:
        default: Cloud Resource Tagging Standard EnvironmentTag
      OwnerTag:
        default: Cloud Resource Tagging Standard Owner
      CostCenterTag:
        default: Cloud Resource Tagging Standard Cost Center
      DataClassificationTag:
        default: Cloud Resource Tagging Standard Data Classification Tag
      PCIDataTag:
        default: Cloud Resource Tagging Standard PCI Data Tag
Parameters:
  VpcName:
    Description: The name of the VPC to launch the Memcache cluster into
    Type: String
  PreferredMaintenanceWindowDay:
    Description: The day of the week which ElastiCache maintenance will be performed
    Type: String
    Default: Mon
    AllowedValues:
    - Mon
    - Tue
    - Wed
    - Thu
    - Fri
    - Sat
    - Sun
  PreferredMaintenanceWindowStartTime:
    Description: The weekly start time in UTC for the ElastiCache maintenance window,
      must be less than PreferredMaintenanceWindowEndTime and cannot overlap with
      PreferredBackupWindow
    Type: String
    Default: 04:00
    AllowedValues:
    - 00:00
    - 01:00
    - 02:00
    - 03:00
    - 04:00
    - 05:00
    - 06:00
    - 07:00
    - 08:00
    - 09:00
    - '10:00'
    - '11:00'
    - '12:00'
    - '13:00'
    - '14:00'
    - '15:00'
    - '16:00'
    - '17:00'
    - '18:00'
    - '19:00'
    - '20:00'
    - '21:00'
    - '22:00'
  PreferredMaintenanceWindowEndTime:
    Description: The weekly end time in UTC for the ElastiCache maintenance window,
      must be more than PreferredMaintenanceWindowEndTime and cannot overlap with
      PreferredBackupWindow
    Type: String
    Default: 06:00
    AllowedValues:
    - 00:00
    - 01:00
    - 02:00
    - 03:00
    - 04:00
    - 05:00
    - 06:00
    - 07:00
    - 08:00
    - 09:00
    - '10:00'
    - '11:00'
    - '12:00'
    - '13:00'
    - '14:00'
    - '15:00'
    - '16:00'
    - '17:00'
    - '18:00'
    - '19:00'
    - '20:00'
    - '21:00'
    - '22:00'
  SubnetName:
    Description: String to match against existing subnets to place the cache
      cluster in (glob wildcards allowed).
    Type: String
  InboundSGName:
    Description: Existing Security Group name to allow access to database (glob
      wildcards allowed).
    Type: String
  CacheNodeType:
    Description: The compute and memory capacity of nodes in a cache cluster.
    Type: String
    AllowedValues:
    - cache.t3.micro
    - cache.t3.small
    - cache.t3.medium
    - cache.m5.large
    - cache.m5.xlarge
    - cache.m5.2xlarge
    - cache.m5.4xlarge
    - cache.m5.12xlarge
    - cache.m5.24xlarge
    - cache.r5.large
    - cache.r5.xlarge
    - cache.r5.2xlarge
    - cache.r5.4xlarge
    - cache.r5.12xlarge
    - cache.r5.24xlarge
    Default: cache.m5.large
  EngineVersion:
    Description: Family to be used with cluster or parameter group
    Type: String
    AllowedValues:
    - 5.0.6
    - 5.0.5
    - 5.0.4
    - 5.0.3
    Default: 5.0.6
  Name:
    Description: Name of service for ReplicationGroupDescription.
    Type: String
  NumCacheClusters:
    Description: The number of cache nodes in the cluster.
    Type: String
    Default: '1'
  AllowVersionUpgrade:
    Description: Indicates that minor engine upgrades will be applied automatically
      to the cache cluster during the maintenance window. The default value is true.
    Type: String
    Default: 'True'
    AllowedValues:
    - 'True'
    - 'False'
  AutomaticFailover:
    Description: Specifies whether a read-only replica is automatically promoted to
      read/write primary if the existing primary fails.
    Type: String
    Default: 'False'
    AllowedValues:
    - 'True'
    - 'False'
  PortNumber:
    Description: The port number for the Cluster to listen on
    Type: Number
    Default: 6379
    MinValue: 1150
    MaxValue: 65535
  ArchPathTag:
    Description: Cloud Resource Tagging Standard ArchPath
    Type: String
  CostCenterTag:
    Description: Cloud Resource Tagging Standard Cost Center
    Type: String
  DataClassificationTag:
    Description: Cloud Resource Tagging Standard Data Classification Tag
    Type: String
  EnvironmentTag:
    Description: Cloud Resource Tagging Standard EnvironmentTag
    Type: String
  OwnerTag:
    Description: Cloud Resource Tagging Standard Owner
    Type: String
  PCIDataTag:
    Description: Cloud Resource Tagging Standard PCI Data Tag
    Type: String

Conditions:
  MultiAz:
    !Not
    - !Equals
      - !Ref NumCacheClusters
      - '1'

Resources:
  ElastiCacheReplicationGroup:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      AtRestEncryptionEnabled: True
      AuthToken: !GetAtt AWSSBInjectedGeneratePassword.MasterUserPassword
      AutoMinorVersionUpgrade: !Ref AllowVersionUpgrade
      AutomaticFailoverEnabled: !Ref AutomaticFailover
      CacheNodeType: !Ref CacheNodeType
      CacheParameterGroupName: default.redis5.0
      CacheSubnetGroupName: !Ref ClusterSubnetGroup
      Engine: redis
      EngineVersion: !Ref EngineVersion
      KmsKeyId: !GetAtt AuroraKMSCMK.Arn
      MultiAZEnabled: !If
        - MultiAz
        - True
        - False
      NumCacheClusters: !Ref NumCacheClusters
      ReplicationGroupDescription: !Ref Name
      Port: !Ref PortNumber
      PreferredMaintenanceWindow: !Sub ${PreferredMaintenanceWindowDay}:${PreferredMaintenanceWindowStartTime}-${PreferredMaintenanceWindowDay}:${PreferredMaintenanceWindowEndTime}
      SecurityGroupIds:
      - !Ref ClusterSecurityGroup
      TransitEncryptionEnabled: True
      Tags:
        - Key: Adobe.ArchPath
          Value: !Ref ArchPathTag
        - Key: Adobe.Environment
          Value: !Ref EnvironmentTag
        - Key: Adobe.Owner
          Value: !Ref OwnerTag
        - Key: Adobe.CostCenter
          Value: !Ref CostCenterTag
        - Key: Adobe.DataClassification
          Value: !Ref DataClassificationTag
        - Key: Adobe.PCIData
          Value: !Ref PCIDataTag
  ClusterSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: AWS Service Broker Elasticache cluster
      SubnetIds: !GetAtt AWSSBInjectedGetSubnetIds.SubnetIDs
  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Allow Client connections
      VpcId: !GetAtt AWSSBInjectedGetSubnetIds.VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Ref PortNumber
        ToPort: !Ref PortNumber
        SourceSecurityGroupId: !GetAtt AWSSBInjectedGetSG.SecurityGroupId0
      SecurityGroupEgress:
      - IpProtocol: '-1'
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
  AuroraKMSCMK:
    Type: AWS::KMS::Key
    DeletionPolicy: Retain
    Properties:
      EnableKeyRotation: True
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action: 'kms:*'
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: '*'
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:CreateGrant
          - kms:ListGrants
          - kms:DescribeKey
          Resource: '*'
          Condition:
            StringEquals:
              kms:CallerAccount: !Ref AWS::AccountId
  AuroraKMSCMKAlias:
    Type: AWS::KMS::Alias
    DeletionPolicy: Retain
    Properties:
      AliasName: !Sub 'alias/${Name}-${AWS::Region}'
      TargetKeyId: !Ref AuroraKMSCMK
  AWSSBInjectedLambdaZipsBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []
  AWSSBInjectedCopyZips:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedCopyZipsLambda.Arn
      DestBucket: !Ref AWSSBInjectedLambdaZipsBucket
      SourceBucket: micro-aws-servicebroker-templates
      Prefix: ""
      Objects:
      - functions/generate_password/lambda_function.zip
      - functions/get_subnet_ids/lambda_function.zip
      - functions/get_sg/lambda_function.zip
      - layers/requests/lambda_layer.zip
  AWSSBInjectedCopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
      - PolicyName: lambda-copier
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
            - arn:aws:s3:::micro-aws-servicebroker-templates/*
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:DeleteObject
            Resource:
            - !Sub arn:aws:s3:::${AWSSBInjectedLambdaZipsBucket}/*
  AWSSBInjectedCopyZipsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt AWSSBInjectedCopyZipsRole.Arn
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse


          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s' % dest_bucket)
                  print('key = %s' % key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)


          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)


          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)


          def handler(event, context):
              timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
  AWSSBInjectedGetSubnetIdsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_subnet_ids
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeVpcs
            - ec2:DescribeSubnets
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGetSubnetIdsLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGetSubnetIdsRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/get_subnet_ids/lambda_function.zip
      Runtime: python3.8
      Timeout: '60'
      Layers:
        - !Ref AWSSBRequestsLambdaLayer
  AWSSBInjectedGetSubnetIds:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGetSubnetIdsLambda.Arn
      VpcName: !Ref VpcName
      SubnetName: !Ref SubnetName
  AWSSBInjectedGetSGRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_sg
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeSecurityGroups
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGetSGLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGetSGRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/get_sg/lambda_function.zip
      Runtime: python3.8
      Timeout: '60'
      Layers:
        - !Ref AWSSBRequestsLambdaLayer
  AWSSBInjectedGetSG:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGetSGLambda.Arn
      SGName: !Ref InboundSGName
  AWSSBRequestsLambdaLayer:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: layers/requests/lambda_layer.zip
      Description: Contains requests and cfnresponse.send()
      LayerName: requests
      LicenseInfo: Apache License v2.0, AWS Customer Agreement
  AWSSBInjectedGeneratePasswordRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_cidrs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGeneratePasswordLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGeneratePasswordRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/generate_password/lambda_function.zip
      Runtime: python3.7
      Timeout: '60'
      Layers:
        - !Ref AWSSBRequestsLambdaLayer
  AWSSBInjectedGeneratePassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGeneratePasswordLambda.Arn
      Length: 64
Outputs:
  EndpointAddress:
    Value:
      !GetAtt
      - ElastiCacheReplicationGroup
      - PrimaryEndPoint.Address
  AuthToken:
    Value:
      !GetAtt AWSSBInjectedGeneratePassword.MasterUserPassword
